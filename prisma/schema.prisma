// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  email       String   @unique
  password    String
  name        String
  avatar      String   @default("")
  role        Role     @default(BASIC)
  rtHash      String?  @map("rt_hash")
  isActivated Boolean  @default(false) @map("is_activated")
  reviews     Review[]
  favourites  Movie[]
  ratings     Rating[]
}

enum Role {
  BASIC
  ADMIN
  OWNER
}

model Movie {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  name      String       @unique
  slug      String       @unique
  avgRating Float        @default(4.0) @map("avg_rating")
  sumViews  Int          @default(1) @map("sum_views")
  poster    String
  bigPoster String       @map("big_poster")
  video     String       @unique
  fees      Int
  params    MovieParams?
  views     Views[]
  rating    Rating[]
  reviews   Review[]
  genres    Genre[]
  actors    Actor[]
  likers    User[]
}

model MovieParams {
  id       String @id @default(uuid())
  year     Int
  duration Int
  country  String
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId  String @unique @map("movie_id")
}

model Views {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  count   Int    @default(1)
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId String @map("movie_id")
}

model Rating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  value    Int
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId  String @map("movie_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String @map("author_id")
}

model Actor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  slug   String  @unique
  name   String
  photo  String  @default("/uploads/movie/no-image.png")
  movies Movie[]
}

model Genre {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  slug        String  @unique
  name        String
  description String
  icon        String
  movies      Movie[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  description String
  author      User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String @map("author_id")
  movie       Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId     String @map("movie_id")
}
